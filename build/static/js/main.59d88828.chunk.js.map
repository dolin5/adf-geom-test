{"version":3,"sources":["../node_modules/@stencil/core/internal/client lazy /^/.*$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","ArcGISMap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","platingProjectIDfield","createPPIDArray","features","dict","forEach","g","attributes","push","dissolvePoints","index","graphics","JSON","parse","stringify","point","Graphic","geometry","averagePointsGeom","x","reduce","sum","length","y","spatialReference","Point","ArcGISMap","mapDiv","useRef","useEffect","current","map","Map","basemap","MapView","container","zoom","center","popup","defaultPopupTemplateEnabled","pointRenderer","type","symbol","size","outline","color","polygonLayer","FeatureLayer","url","minScale","renderer","outFields","pointLayer","objectIdField","popupEnabled","projectQuery","where","returnGeometry","returnDistinctValues","all","queryFeatures","r","polyQuery","f","join","pointQuery","polygonFeatures","pointFeatures","polygonCentroidGraphics","centroid","mergedPoints","mergedArrays","dissolvedPoints","Object","entries","popupTemplate","createPopupTemplate","fields","filter","fpnt","fplyg","name","includes","zoomedOutLayer","find","source","maxScale","middleLayer","addMany","className","ref","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59d88828.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 387;","import React, { useEffect, useRef } from 'react'\nimport MapView from '@arcgis/core/views/MapView'\nimport Map from '@arcgis/core/Map';\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\nimport Polygon from '@arcgis/core/geometry/Polygon';\nimport Point from '@arcgis/core/geometry/Point';\nimport Graphic from '@arcgis/core/Graphic';\nimport SimpleMarkerSymbol from '@arcgis/core/symbols/SimpleMarkerSymbol';\nimport SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer';\nimport Query from '@arcgis/core/tasks/support/Query';\nimport PopupTemplate from '@arcgis/core/PopupTemplate';\n\nconst platingProjectIDfield = \"PlantingProjectID\"\n\nconst ArcGISMap = ()=>{\n\n    \n  const mapDiv = useRef(null);\n\n  useEffect(() => {\n    if (mapDiv.current) {\n      /**\n       * Initialize application\n       */\n      const map = new Map({\n        basemap: \"streets-vector\"\n\n      });\n\n      const view = new MapView({\n        container: mapDiv.current!,\n        map,\n        zoom:3,\n        center:[-100,39]\n      });\n\n      view.popup.defaultPopupTemplateEnabled= true;\n\n      const polygonRenderer = {\n        type:'simple',\n        symbol:{\n        type:'simple-fill',\n        outline: {           color: [0, 196, 0, 1] },\n        color: [0, 196, 0, .25]}\n      } as unknown as SimpleRenderer;\n\n      const pointRenderer = {\n        type:'simple',\n        symbol:{\n          type:'simple-marker',\n          size:8,              \n          outline: { color: [0, 196, 0, 1] },\n          color: [0, 196, 0, .5]\n        } \n      } as unknown as SimpleRenderer;\n\n      const polygonLayer = new FeatureLayer({\n        url:\"https://gis-test.arborday.org/server/rest/services/CP_Showcase_MVP_Data_Polygon/FeatureServer/0\",\n        minScale:99999,\n        renderer:polygonRenderer,\n        outFields:['*']\n      });\n\n\n      const pointLayer = new FeatureLayer({\n        url:\"https://gis-test.arborday.org/server/rest/services/CP_Showcase_MVP_Data_Points/FeatureServer/0\",\n        objectIdField:'OBJECTID',\n        renderer:pointRenderer, \n        minScale:99999,\n        outFields:['*'],\n        popupEnabled:true,\n      });\n\n\n      const projectQuery = {where:\"1=1\", outFields:[platingProjectIDfield,'PlantingProjectName','PlantingProjectType','CalendarYear','AcresRestored'], returnGeometry:false, returnDistinctValues:true} as Query;\n\n      Promise.all([polygonLayer.queryFeatures(projectQuery),pointLayer.queryFeatures(projectQuery)]).then(r=>{      \n        const prjcts = [...r[0].features,r[1].features];\n        const polyQuery = {where:\"PlantingProjectID IN (\"+r[0].features.map(f=>f.attributes[platingProjectIDfield]).join(',')+\")\",outFields:['*'], returnGeometry:true} as Query\n        const pointQuery = {where:\"PlantingProjectID IN (\"+r[1].features.map(f=>f.attributes[platingProjectIDfield]).join(',')+\")\",outFields:['*'], returnGeometry:true} as Query        \n\n        Promise.all([polygonLayer.queryFeatures(polyQuery), pointLayer.queryFeatures(pointQuery)]).then(r=>{\n          const polygonFeatures = r[0].features;\n          const pointFeatures = r[1].features;\n          const polygonCentroidGraphics = polygonFeatures.map(f=>{\n            return new Graphic({attributes:f.attributes,geometry:(f.geometry as Polygon).centroid})\n          })\n\n          const mergedPoints = [...polygonCentroidGraphics, ...pointFeatures];\n          const mergedArrays = createPPIDArray(mergedPoints);\n\n          const dissolvedPoints:Graphic[] = Object.entries(mergedArrays).map(dissolvePoints);\n\n          const popupTemplate = pointLayer.createPopupTemplate();\n\n        \n          const fields = pointLayer.fields.filter(fpnt=>polygonLayer.fields.map(fplyg=>fplyg.name).includes(fpnt.name));\n          const forestCodeField = pointLayer.fields.find(f=>f.name=='ForestCode');\n\n\n          const zoomedOutLayer = new FeatureLayer({\n            source:dissolvedPoints, objectIdField:'OBJECTID',renderer:pointRenderer,\n            maxScale:5000000,\n            fields,\n            popupTemplate\n          });\n\n          const middleLayer = new FeatureLayer({\n            source:mergedPoints, objectIdField:'OBJECTID', renderer:pointRenderer,minScale:4999999,maxScale:100000,fields,popupTemplate\n          });      \n          \n          map.addMany([zoomedOutLayer,middleLayer,polygonLayer, pointLayer]);\n        } )        \n      })\n\n    }\n  }, []);\n\n  return <div className=\"mapDiv\" ref={mapDiv}></div>;\n}\n\nconst createPPIDArray= (features:Graphic[]): {[key: string]: Graphic[]}=>{\n  const dict = {} as {[key: string]: Graphic[]};\n\n  features.forEach(g=>{\n    dict[g.attributes[platingProjectIDfield]] = dict[g.attributes[platingProjectIDfield]] || [];\n    dict[g.attributes[platingProjectIDfield]].push(g);\n  })\n  return dict;  \n}\n\nconst dissolvePoints = ([id,graphics]:[string,Graphic[]],index:number)=>{\n  const attributes = JSON.parse(JSON.stringify(graphics[0].attributes));\n  attributes['OBJECTID'] = index;\n    const point = new Graphic({attributes})\n    point.geometry = averagePointsGeom(graphics);\n    return point;\n}\n\nconst averagePointsGeom = (graphics:Graphic[]):Point=>{\n    const x = graphics.reduce((sum,g)=>sum+(g.geometry as Point).x,0)/graphics.length;\n    const y = graphics.reduce((sum,g)=>sum+(g.geometry as Point).y,0)/graphics.length;\n    const spatialReference = graphics[0].geometry.spatialReference;\n    return new Point({spatialReference,x,y});\n}\n\nconst generatePopup = (feature:Graphic)=>{\n  console.log(feature);\n  return JSON.stringify(feature);\n}\n\n\nexport default ArcGISMap","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ArcGISMap from './ArcGISMap'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <ArcGISMap></ArcGISMap>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}